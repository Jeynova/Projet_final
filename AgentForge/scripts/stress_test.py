#!/usr/bin/env python3
"""
Test de Stress AgentForge
Tests de robustesse avec prompts edge-cases
"""

import sys
import json
import tempfile
from pathlib import Path
from datetime import datetime

# Add project to path
ROOT = Path(__file__).resolve().parents[1]
sys.path.append(str(ROOT))

from orchestrator.agents import spec_extractor, planner, scaffolder, tech_selector, codegen, eval_agent

class StressTest:
    """Tests de stress et edge cases"""
    
    def __init__(self):
        self.results = []
        self.total_tests = 0
        self.passed_tests = 0
    
    def test_edge_case(self, name: str, prompt: str, should_succeed: bool = True):
        """Test un cas limite sp√©cifique"""
        print(f"\nüî• STRESS TEST: {name}")
        print(f"Prompt: {prompt}")
        print(f"Attendu: {'Succ√®s' if should_succeed else 'Gestion gracieuse'}")
        
        self.total_tests += 1
        test_result = {
            "name": name,
            "prompt": prompt,
            "should_succeed": should_succeed,
            "timestamp": datetime.now().isoformat(),
            "actual_success": False,
            "graceful_failure": False,
            "details": {}
        }
        
        try:
            with tempfile.TemporaryDirectory() as tmp_dir:
                state = {
                    "prompt": prompt,
                    "name": f"stress-{name.lower().replace(' ', '-')}",
                    "artifacts_dir": tmp_dir,
                    "logs": []
                }
                
                # Pipeline complet avec gestion d'erreurs
                try:
                    state = spec_extractor(state)
                    entities = state["spec"].get("entities", [])
                    
                    state = tech_selector(state) 
                    state = planner(state)
                    state = scaffolder(state)
                    state = codegen(state)
                    state = eval_agent(state)
                    
                    eval_result = state.get("eval", {})
                    score = eval_result.get("score", 0)
                    
                    test_result.update({
                        "actual_success": score >= 0.5,  # Seuil plus bas pour stress test
                        "graceful_failure": True,  # A r√©ussi sans crash
                        "details": {
                            "entities_parsed": len(entities),
                            "eval_score": score,
                            "logs_count": len(state.get("logs", [])),
                            "project_created": Path(state.get("project_dir", "")).exists()
                        }
                    })
                    
                    if score >= 0.5:
                        print(f"‚úÖ SUCC√àS - Score: {score} | Entit√©s: {len(entities)}")
                        if should_succeed:
                            self.passed_tests += 1
                    else:
                        print(f"‚ö†Ô∏è √âCHEC GRACIEUX - Score: {score}")
                        if not should_succeed:  # √âchec attendu g√©r√© gracieusement
                            self.passed_tests += 1
                            
                except Exception as inner_e:
                    print(f"‚ö†Ô∏è ERREUR G√âR√âE: {inner_e}")
                    test_result["graceful_failure"] = True
                    test_result["details"]["inner_error"] = str(inner_e)
                    if not should_succeed:
                        self.passed_tests += 1
                    
        except Exception as e:
            print(f"üí• CRASH NON G√âR√â: {e}")
            test_result.update({
                "actual_success": False,
                "graceful_failure": False,
                "details": {"crash_error": str(e)}
            })
            import traceback
            traceback.print_exc()
        
        self.results.append(test_result)

def main():
    print("üî• TEST DE STRESS AGENTFORGE")
    print("Tests de robustesse et gestion edge cases")
    print("=" * 80)
    
    stress = StressTest()
    
    # Tests de robustesse - Prompts valides mais difficiles
    print("\nüìã SECTION 1: PROMPTS COMPLEXES")
    
    stress.test_edge_case(
        "Prompt Tr√®s Long",
        "API tr√®s complexe pour syst√®me de gestion d'entreprise avec utilisateurs ayant des r√¥les multiples, des produits avec variantes et options, des commandes avec √©tats complexes, des paiements avec multiples m√©thodes, des livraisons avec tracking, des retours et remboursements, des avis clients avec mod√©ration, des promotions et codes de r√©duction, des statistiques et rapports avanc√©s, int√©gration avec syst√®mes externes, notifications temps r√©el, cache distribu√©, recherche elasticsearch",
        should_succeed=True
    )
    
    stress.test_edge_case(
        "Entit√©s Multiples",
        "API avec users(email unique, password_hash, role, created_at datetime), products(name, description, price float, stock int, category_id int, active bool), categories(name unique, description), orders(user_id int, total float, status, created_at datetime), order_items(order_id int, product_id int, quantity int, price float), reviews(user_id int, product_id int, rating int, comment, created_at datetime)",
        should_succeed=True
    )
    
    stress.test_edge_case(
        "Types Complexes",
        "API avec events(name, start_datetime datetime, end_datetime datetime, price float, capacity int, available bool) et bookings(event_id int, user_email, quantity int, total_price float, booking_date datetime, status)",
        should_succeed=True
    )
    
    # Tests edge cases - Prompts limites
    print("\nüö® SECTION 2: EDGE CASES")
    
    stress.test_edge_case(
        "Prompt Vide",
        "",
        should_succeed=False
    )
    
    stress.test_edge_case(
        "Prompt Tr√®s Court", 
        "API",
        should_succeed=True  # Devrait g√©n√©rer quelque chose par d√©faut
    )
    
    stress.test_edge_case(
        "Syntaxe Incorrecte",
        "API avec users(email unique password_hash et products name, price",
        should_succeed=True  # Devrait g√©rer la syntaxe cass√©e
    )
    
    stress.test_edge_case(
        "Caract√®res Sp√©ciaux",
        "API avec entit√©s sp√©ciales: users(email@domain.com, password#hash) et products(name with spaces, price$)",
        should_succeed=True
    )
    
    stress.test_edge_case(
        "M√©lange Langues",
        "API pour gestion utilisateurs avec users(email unique, mot_de_passe) and products(nom, prix float)",
        should_succeed=True
    )
    
    stress.test_edge_case(
        "R√©p√©titions",
        "API API API avec users users users(email email, password password) et products products(name name, price price)",
        should_succeed=True
    )
    
    # Tests de performance d√©grad√©e
    print("\n‚ö° SECTION 3: PERFORMANCE D√âGRAD√âE")
    
    stress.test_edge_case(
        "Entit√©s Nombreuses",
        "API avec " + ", ".join([f"entity{i}(field1, field2, field3 int)" for i in range(20)]),
        should_succeed=True
    )
    
    stress.test_edge_case(
        "Champs Nombreux",
        f"API avec bigentity({', '.join([f'field{i}' for i in range(50)])})",
        should_succeed=True
    )
    
    # Tests de cas m√©tier sp√©ciaux
    print("\nüè¢ SECTION 4: CAS M√âTIER SP√âCIAUX")
    
    stress.test_edge_case(
        "Domaine M√©dical",
        "API pour dossiers m√©dicaux avec patients(nom, date_naissance datetime, s√©curit√©_sociale unique) et consultations(patient_id int, m√©decin, diagnostic, prescription)",
        should_succeed=True
    )
    
    stress.test_edge_case(
        "Syst√®me Bancaire", 
        "API bancaire avec comptes(numero unique, solde float, type) et transactions(compte_source int, compte_dest int, montant float, date_transaction datetime)",
        should_succeed=True
    )
    
    stress.test_edge_case(
        "IoT Sensors",
        "API IoT avec sensors(device_id unique, location, type) et measurements(sensor_id int, value float, timestamp datetime, unit)",
        should_succeed=True
    )
    
    # Rapport final
    print(f"\n{'='*80}")
    print("üî• RAPPORT STRESS TEST")
    print(f"{'='*80}")
    
    success_rate = (stress.passed_tests / stress.total_tests) * 100
    graceful_failures = sum(1 for r in stress.results if r["graceful_failure"])
    crashes = stress.total_tests - graceful_failures
    
    print(f"Tests r√©ussis: {stress.passed_tests}/{stress.total_tests}")
    print(f"Taux de r√©ussite: {success_rate:.1f}%")
    print(f"√âchecs gracieux: {graceful_failures}/{stress.total_tests}")
    print(f"Crashes: {crashes}/{stress.total_tests}")
    
    # D√©tails par test
    print(f"\nüìä D√âTAILS PAR TEST:")
    for result in stress.results:
        if result["actual_success"]:
            status = "‚úÖ PASS"
        elif result["graceful_failure"]:
            status = "‚ö†Ô∏è GRACEFUL"
        else:
            status = "üí• CRASH"
        
        score = result["details"].get("eval_score", 0)
        entities = result["details"].get("entities_parsed", 0)
        
        print(f"{status} {result['name']:25} | Score: {score:3.1f} | Entit√©s: {entities:2}")
    
    # Sauvegarde
    results_file = ROOT / "stress_test_results.json"
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump({
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_tests": stress.total_tests,
                "passed_tests": stress.passed_tests,
                "success_rate": success_rate,
                "graceful_failures": graceful_failures,
                "crashes": crashes,
                "robustness_score": (graceful_failures / stress.total_tests) * 100
            },
            "tests": stress.results
        }, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÅ R√©sultats sauvegard√©s: {results_file}")
    
    # Conclusion
    robustness_score = (graceful_failures / stress.total_tests) * 100
    
    if crashes == 0 and success_rate >= 70:
        print(f"\nüõ°Ô∏è SYST√àME TR√àS ROBUSTE ! (0 crash, {success_rate:.1f}% succ√®s)")
        return True
    elif crashes == 0:
        print(f"\n‚úÖ Syst√®me robuste (0 crash, {success_rate:.1f}% succ√®s)")
        return True
    elif crashes <= 2:
        print(f"\n‚ö†Ô∏è Robustesse acceptable ({crashes} crashes)")
        return True
    else:
        print(f"\n‚ùå Robustesse insuffisante ({crashes} crashes)")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
